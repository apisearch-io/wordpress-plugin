<?php

/*
 * This file is part of the Apisearch Simple PHP Client.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * Feel free to edit as you please, and have fun.
 *
 * @author Marc Morera <yuhu@mmoreram.com>
 * @author PuntMig Technologies
 */

class ApisearchClient
{
    /**
     * @var array
     *
     * Elements to update
     */
    private $elementsToUpdate;

    /**
     * @var array
     *
     * Elements to delete
     */
    private $elementsToDelete;

    /**
     * @var string
     *
     * Host
     */
    private $host;

    /**
     * @var string
     *
     * Version
     */
    private $version;

    /**
     * @var string
     *
     * App id
     */
    private $appId;

    /**
     * @var string
     *
     * Index id
     */
    private $indexId;

    /**
     * @var string
     *
     * Token
     */
    private $token;

    /**
     * Set credentials.
     *
     * @param string $appId
     * @param string $indexId
     * @param string $token
     */
    public function setCredentials(
        $appId,
        $indexId,
        $token
    ) {
        $this->appId = $appId;
        $this->indexId = $indexId;
        $this->token = $token;
    }

    /**
     * Repository constructor.
     *
     * @param string $host
     * @param string $version
     */
    public function __construct(
        $host,
        $version
    ) {
        $this->resetCachedElements();
        $this->host = $host;
        $this->version = $version;
    }

    /**
     * Reset cache.
     */
    private function resetCachedElements()
    {
        $this->elementsToUpdate = array();
        $this->elementsToDelete = array();
    }

    /**
     * Search across the index types.
     *
     * @param array $query
     *
     * @return array
     *
     * @throws Exception
     */
    public function query(array $query)
    {
        return $this->get(
            '/',
            'get',
            array(
                'query' => json_encode($query),
            )
        );
    }

    /**
     * Reset the index.
     *
     * @throws Exception
     */
    public function resetIndex()
    {
        $this->get(
            '/index/reset',
            'post',
            array()
        );
    }

    /**
     * Checks the index.
     *
     * @return bool
     */
    public function checkIndex()
    {
        try {
            $this->get(
                '/index',
                'head',
                array()
            );
        } catch (Exception $exception) {
            return false;
        }

        return true;
    }

    /**
     * Config the index.
     *
     * @param array $config
     *
     * @throws Exception
     */
    public function configureIndex(array $config)
    {
        $this->get(
            '/index/config',
            'post',
            array(
                'config' => json_encode($config),
            )
        );
    }

    /**
     * Generate item document.
     *
     * @param array $item
     */
    public function addItem(array $item)
    {
        $itemUUID = $this->composeUUID($item['uuid']);

        $this->elementsToUpdate[$itemUUID] = $item;
        unset($this->elementsToDelete[$itemUUID]);
    }

    /**
     * Generate item documents.
     *
     * @param array[] $items
     */
    public function addItems(array $items)
    {
        foreach ($items as $item) {
            $this->addItem($item);
        }
    }

    /**
     * Delete item documents by uuid.
     *
     * @param array[] $uuids
     */
    public function deleteItems(array $uuids)
    {
        foreach ($uuids as $uuid) {
            $this->deleteItem($uuid);
        }
    }

    /**
     * Delete item document by uuid.
     *
     * @param array $uuid
     */
    public function deleteItem(array $uuid)
    {
        $itemUUID = $this->composeUUID($uuid);
        $this->elementsToDelete[$itemUUID] = $uuid;
        unset($this->elementsToUpdate[$itemUUID]);
    }

    /**
     * Flush all.
     *
     * This flush can be avoided if not enough items have been generated by
     * setting $skipIfLess = true
     *
     * @param int  $bulkNumber
     * @param bool $skipIfLess
     *
     * @throws Exception
     */
    public function flush(
        int $bulkNumber = 500,
        bool $skipIfLess = false
    ) {
        if (
            $skipIfLess &&
            count($this->elementsToUpdate) < $bulkNumber
        ) {
            return;
        }

        $offset = 0;

        try {
            while (true) {
                $items = array_slice(
                    $this->elementsToUpdate,
                    $offset,
                    $bulkNumber
                );

                if (empty($items)) {
                    break;
                }

                $this->flushItems($items, array());
                $offset += $bulkNumber;
            }

            $this->flushItems(array(), $this->elementsToDelete);
        } catch (Exception $exception) {
            /*
             * No matter the exception is thrown, cached elements should be
             * deleted
             */
            $this->resetCachedElements();

            throw $exception;
        }

        $this->resetCachedElements();
    }

    /**
     * Flush items.
     *
     * @param array[] $itemsToUpdate
     * @param array[] $itemsToDelete
     *
     * @throws Exception
     */
    private function flushItems(
        array $itemsToUpdate,
        array $itemsToDelete
    ) {
        if (!empty($itemsToUpdate)) {
            $this
                ->get(
                    '/items',
                    'post',
                    array(
                        'items' => json_encode($itemsToUpdate),
                    )
                );
        }

        if (!empty($itemsToDelete)) {
            $this
                ->get(
                    '/items',
                    'delete',
                    array(
                        'items' => json_encode($itemsToDelete),
                    )
                );
        }
    }

    /**
     * Compose unique id.
     *
     * @param array $itemUUID
     *
     * @return string
     */
    private function composeUUID(array $itemUUID)
    {
        return $itemUUID['id'].'~'.$itemUUID['type'];
    }

    /**
     * Make a request and return response.
     *
     * @param string $endpoint
     * @param string $method
     * @param array  $body
     *
     * @return string
     *
     * @throws Exception
     */
    private function get(
        $endpoint,
        $method,
        array $body
    ) {
        $opts = array('http' => array(
                'method' => $method,
                'ignore_errors' => true,
                'header' => 'Content-type: application/x-www-form-urlencoded',
                'content' => http_build_query($body),
            ),
        );
        $context = stream_context_create($opts);
        $url = sprintf('%s/%s/%s?app_id=%s&index=%s&token=%s',
            rtrim($this->host, '/'),
            trim($this->version, '/'),
            ltrim($endpoint, '/'),
            $this->appId,
            $this->indexId,
            $this->token
        );
        $data = file_get_contents($url, false, $context);
        $code = $this->parseResponseStatusCode($http_response_header['0']);

        if (200 !== $code) {
            throw new Exception($data, $code);
        }

        return $data;
    }

    /**
     * Parse response header and return value.
     *
     * @param string $header
     *
     * @return int
     */
    private function parseResponseStatusCode($header)
    {
        try {
            list(, $code, $status) = explode(' ', $header, 3);

            return (int) $code;
        } catch (Exception $exception) {
            // Silent pass
        }

        return null;
    }
}
